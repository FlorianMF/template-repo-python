[metadata]
license_file = LICENSE
description-file = README.md
# long_description = file:README.md
# long_description_content_type = text/markdown

[check-manifest]
ignore =
    *.yml
    .github
    .github/*
    .circleci
    .circleci/*

[bdist_wheel]
universal = true

[coverage:run]
parallel = True
#concurrency = thread, multiprocessing
concurrency = thread

[coverage:report]
exclude_lines =
    pragma: no-cover
    warnings
    pass
    if __name__ == .__main__.:
    add_model_specific_args
    add_task_specific_args
    add_data_specific_args

[isort]
known_first_party =
    examples
    REPONAME
    tests
    scripts
line_length = 79
order_by_type = False
# 3 - Vertical Hanging Indent
multi_line_output = 3
include_trailing_comma = True

[yapf]
based_on_style = pep8
spaces_before_comment = 2
split_before_logical_operator = true
split_before_arithmetic_operator = true
COLUMN_LIMIT = 79
COALESCE_BRACKETS = true
DEDENT_CLOSING_BRACKETS = true
ALLOW_SPLIT_BEFORE_DICT_VALUE = false
BLANK_LINE_BEFORE_NESTED_CLASS_OR_DEF = true
NO_SPACES_AROUND_SELECTED_BINARY_OPERATORS = false

[flake8]
max-line-length = 79
exclude = .tox,*.egg,build,temp
select = E,W,F
doctests = True
verbose = 2
# https://pep8.readthedocs.io/en/latest/intro.html#error-codes
format = pylint
# see: https://www.flake8rules.com/
ignore =
    # E501  # line too long. Handled by black, we have longer lines
    E203  # whitespace before ':'. Opposite convention enforced by black
    E231  # missing whitespace after ',', ';', or ':'; for black
    E731  # Do not assign a lambda expression, use a def
    # F401  # Module imported but unused
    F841  # Local variable name is assigned to but never used
    W503  # line break before binary operator, need for black
    W504  # Line break occurred after a binary operator
    W605  # Invalid escape sequence 'x'

[versioneer]
VCS = git
style = pep440
versionfile_source = REPONAME/_version.py
versionfile_build = REPONAME/_version.py
tag_prefix = v
parentdir_prefix =


# TODO add mypy or pyright as static type checker
# [pycodestyle]
# convention = pep257
# # D104, D107: Ignore missing docstrings in __init__ files and methods.
# # D202: Ignore a blank line after docstring (collision with Python Black in decorators)
# add-ignore = D104,D107,D202
# exclude = .eggs,*.egg,build,.git,versioneer.py,*/conf.py
# ignore = E402, E721
# max_line_length = 79
